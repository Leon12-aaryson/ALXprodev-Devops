#!/bin/bash

# Batch Pok√©mon Data Retrieval - Task 2 & 4
# Fetches data for multiple Pok√©mon with rate limiting, error handling, and retry logic

# List of Pok√©mon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Retry configuration
MAX_RETRIES=3
RETRY_DELAY=2

# Create pokemon_data directory if it doesn't exist
mkdir -p pokemon_data

# Function to log errors
log_error() {
    echo "$(date): $1" >> errors.txt
}

# Function to fetch a single Pok√©mon with retry logic
fetch_pokemon() {
    local pokemon_name="$1"
    local api_url="https://pokeapi.co/api/v2/pokemon/$pokemon_name"
    local output_file="pokemon_data/${pokemon_name}.json"
    local retry_count=0
    
    echo "Fetching data for $pokemon_name..."
    
    # Retry loop
    while [ $retry_count -lt $MAX_RETRIES ]; do
        # Make the API request
        if curl -s -f "$api_url" > "$output_file" 2>/dev/null; then
            echo "Saved data to $output_file ‚úÖ"
            return 0
        else
            retry_count=$((retry_count + 1))
            if [ $retry_count -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è  Attempt $retry_count failed for $pokemon_name. Retrying in ${RETRY_DELAY}s..."
                log_error "Attempt $retry_count failed for $pokemon_name from $api_url"
                sleep $RETRY_DELAY
            else
                log_error "All $MAX_RETRIES attempts failed for $pokemon_name from $api_url"
                echo "‚ùå Failed to fetch data for $pokemon_name after $MAX_RETRIES attempts"
                return 1
            fi
        fi
    done
}

# Function to validate Pok√©mon name
validate_pokemon_name() {
    local pokemon_name="$1"
    
    # Check if name contains only letters and is not empty
    if [[ "$pokemon_name" =~ ^[a-zA-Z]+$ ]] && [ -n "$pokemon_name" ]; then
        return 0
    else
        log_error "Invalid Pok√©mon name: $pokemon_name"
        return 1
    fi
}

# Main execution
echo "üöÄ Starting batch Pok√©mon data retrieval with error handling..."

# Check if curl is available
if ! command -v curl &> /dev/null; then
    log_error "curl command not found"
    echo "‚ùå Error: curl command not found. Please install curl."
    exit 1
fi

# Check network connectivity
if ! curl -s --connect-timeout 5 "https://pokeapi.co" > /dev/null 2>&1; then
    log_error "Network connectivity issue - cannot reach pokeapi.co"
    echo "‚ùå Error: Network connectivity issue. Please check your internet connection."
    exit 1
fi

# Loop through each Pok√©mon
success_count=0
total_count=${#POKEMON_LIST[@]}

for pokemon in "${POKEMON_LIST[@]}"; do
    if validate_pokemon_name "$pokemon"; then
        if fetch_pokemon "$pokemon"; then
            success_count=$((success_count + 1))
        fi
        # Add delay between requests to avoid rate limiting
        sleep 1
    else
        echo "‚ö†Ô∏è  Skipping invalid Pok√©mon name: $pokemon"
    fi
done

echo ""
echo "üéâ Batch retrieval completed!"
echo "‚úÖ Successfully processed: $success_count/$total_count Pok√©mon"
echo "üìÅ All data files are saved in the pokemon_data/ directory"

if [ $success_count -lt $total_count ]; then
    echo "‚ö†Ô∏è  Some requests failed. Check errors.txt for details."
fi
